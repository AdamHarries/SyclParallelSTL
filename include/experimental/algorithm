/* Copyright (c) 2015 The Khronos Group Inc.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and/or associated documentation files (the
  "Materials"), to deal in the Materials without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Materials, and to
  permit persons to whom the Materials are furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Materials.

  MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS
  KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS
  SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT
     https://www.khronos.org/registry/

  THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/
/* vim: set filetype=cpp foldmethod=indent: */
#ifndef __EXPERIMENTAL_PARALLEL_ALGORITHM__
#define __EXPERIMENTAL_PARALLEL_ALGORITHM__

#include <type_traits>
#include <typeinfo>
#include <algorithm>
#include <iostream>

namespace std {
namespace experimental {
namespace parallel {

/** sort
 * @brief Function that sorts the given range
 * @param sep   : Execution Policy
 * @param first : Start of the range
 * @param last  : End of the range
 */
template <class ExecutionPolicy, class RandomAccessIterator>
void sort(ExecutionPolicy &sep, RandomAccessIterator b,
          RandomAccessIterator e) {
  sep.sort(b, e);
}

/** sort
 * @brief Function that takes a Comp Operator and applies it to the given range
 * @param sep   : Execution Policy
 * @param first : Start of the range
 * @param last  : End of the range
 * @param comp  : Comp Operator
 */
template <class ExecutionPolicy, class RandomIt, class Compare>
void sort(ExecutionPolicy &sep, RandomIt first, RandomIt last, Compare comp) {
  sep.sort(first, last, comp);
}

/** transform
 * @brief Function that takes a Unary Operator and applies to the given range
 * @param sep : Execution Policy
 * @param b   : Start of the range
 * @param e   : End of the range
 * @param out : Output iterator
 * @param op  : Unary Operator
 * @return  An iterator pointing to the last element
 */
template <class ExecutionPolicy, class Iterator, class OutputIterator,
          class UnaryOperation>
OutputIterator transform(ExecutionPolicy &sep, Iterator b, Iterator e,
                         OutputIterator out, UnaryOperation op) {
  return sep.transform(b, e, out, op);
}

/** transform
 * @brief Function that takes a Binary Operator and applies to the given range
 * @param sep    : Execution Policy
 * @param first1 : Start of the range of buffer 1
 * @param last1  : End of the range of buffer 1
 * @param first2 : Start of the range of buffer 2
 * @param result : Output iterator
 * @param op     : Binary Operator
 * @return  An iterator pointing to the last element
 */
template <class ExecutionPolicy, class InputIt1, class InputIt2, class OutputIt,
          class BinaryOperation>
OutputIt transform(ExecutionPolicy &sep, InputIt1 first1, InputIt1 last1,
                   InputIt2 first2, OutputIt result, BinaryOperation op) {
  return sep.transform(first1, last1, first2, result, op);
}

/* for_each
 */
template <class ExecutionPolicy, class Iterator, class UnaryFunction>
void for_each(ExecutionPolicy &sep, Iterator b, Iterator e, UnaryFunction f) {
  sep.for_each(b, e, f);
}

/* for_each_n.
 * @brief Applies a Function across the range [first, first + n).
 * Implementation of the sequential version.
 * According to  ParallelismTS version n4507. Section 4.3.2
 * @param InputIterator first : Start of the range via a forward iterator
 * @param Size n : Specifies the number of valid elements
 * @param Function  f : No restrictions
 */
template <class InputIterator, class Size, class Function>
InputIterator for_each_n(InputIterator first, Size n, Function f) {
  if (n > 0) {
    InputIterator last(first + n);
    std::for_each(first, last, f);
    return last;
  } else {
    return first;
  }
}

/* for_each_n.
* @brief Applies a Function across the range [first, first + n).
* Implementation of the command group that submits a for_each_n kernel,
* According to Parallelism TS version n4507. Section 4.3.2
*/
template <class ExecutionPolicy, class InputIterator, class Size,
          class Function>
InputIterator for_each_n(ExecutionPolicy &&exec, InputIterator first, Size n,
                         Function f) {
  return exec.for_each_n(first, n, f);
}

}  // namespace parallel
}  // namespace experimental
}  // namespace std

#endif  // __EXPERIMENTAL_PARALLEL_ALGORITHM__
